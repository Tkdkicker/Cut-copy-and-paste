using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.Office.Interop.Excel;

namespace Kanban
{
    public partial class Other : Kanban
    {
        #region ValidateUserInput - Checks the row of data by user

        public bool ValidateUserInput(DataGridViewRow row)
        {
            //Make sure the user has entered a value in the 'Part Number' and 'Quantity Issued' column
            if (row.Cells["PartNumber"].Value == null && row.Cells["QuantityIssued"].Value == null)
            {
                row.Cells["PartNumber"].Style.BackColor = Color.LightBlue;//Set colour of empty cell to blue
                row.Cells["QuantityIssued"].Style.BackColor = Color.LightBlue;//Set colour of empty cell to blue

                MessageBox.Show("These cells can't be empty", "Try again", MessageBoxButtons.OK, MessageBoxIcon.Error);

                row.Cells["PartNumber"].Style.BackColor = Color.White;//Set colour of cell back to white
                row.Cells["QuantityIssued"].Style.BackColor = Color.White;//Set colour of cell back to white

                return false;
            }

            //Make sure the user has entered a value in the 'Part Number' column
            if (row.Cells["PartNumber"].Value == null)
            {
                row.Cells["PartNumber"].Style.BackColor = Color.LightBlue;//Set colour of empty cell to blue

                MessageBox.Show("This cell can't be empty", "Try again", MessageBoxButtons.OK, MessageBoxIcon.Error);

                row.Cells["PartNumber"].Style.BackColor = Color.White;//Set colour of cell back to white

                return false;
            }

            //Make sure the user has entered a value in the 'Quantity Issued' column
            if (row.Cells["QuantityIssued"].Value == null)
            {
                row.Cells["QuantityIssued"].Style.BackColor = Color.LightBlue;//Set colour of empty cell to blue

                MessageBox.Show("This cell can't be empty", "Try again", MessageBoxButtons.OK, MessageBoxIcon.Error);

                row.Cells["QuantityIssued"].Style.BackColor = Color.White;//Set colour of cell back to white

                return false;
            }

            //Make sure the 'Quantity Issued' column is a number
            try
            {
                int quantity = int.Parse(row.Cells["QuantityIssued"].Value.ToString());
            }
            catch (FormatException)
            {
                row.Cells["QuantityIssued"].Style.BackColor = Color.LightBlue;//Set colour of empty cell to blue

                MessageBox.Show("You must enter a number for quantity", "Try again", MessageBoxButtons.OK, MessageBoxIcon.Error);

                row.Cells["QuantityIssued"].Style.BackColor = Color.White;//Set colour of cell back to white

                return false;
            }
            return true;
        }

        #endregion ValidateUserInput - Checks the row of data by user

        #region FindPartCodeRow - Find the Kanban Excel row the part code exists on, if not found return false

        public bool FindPartCodeRow(string partNumber, ref int excelRow)
        {
            Range range = wsKBList.UsedRange;
            int lastRowKB = range.Rows.Count;//Get the last used row

            string[] KBNumber;//Array
            KBNumber = new string[lastRowKB];//Assign array to the lastRow -last used row

            //Loop through the lastRowKB (last empty used row)
            for (int firstRow = 2; firstRow <= lastRowKB; firstRow++)
            {
                //Each row of column A goes into the KBNumber array
                var test = wsKBList.Rows[firstRow].Columns["D"].Value;
                if (test != null)
                {
                    KBNumber[firstRow - 2] = wsKBList.Rows[firstRow].Columns["D"].Value.ToString();
                }
            }

            //Assign the array variable 'arrayIndex' of looking at the inputted part number is the same as the Excel 'Issues' tab column B
            int arrayIndex = Array.FindIndex(KBNumber, element => element == partNumber);

            int notFound = -1;
            if (arrayIndex == notFound)
            {
                return false;
            }
            else
            {
                excelRow = arrayIndex + 2;
                return true;
            }
        }

        #endregion FindPartCodeRow - Find the Kanban Excel row the part code exists on, if not found return false

        #region ExportToExcel - Insert ScanDataGrid row into spreadsheet

        public void ExportToExcel(DataGridViewRow row)
        {
            //Get the last used row and adds one
            Range userRange = wsIssues.UsedRange;
            int lastRow = userRange.Rows.Count;//Get the last used row
            int add = lastRow + 1;

            try
            {
                //'Part Number' column with last cell of Excel spreadsheet
                wsIssues.Rows[add].Columns["B"] = row.Cells["PartNumber"].Value.ToString();

                //'Description' column with last cell of Excel spreadsheet
                wsIssues.Rows[add].Columns["C"].Formula = "=XLOOKUP([@[KB Number]],Table3[KB Number],Table3[Description])";

                //'Quantity Issued' column with last cell of Excel spreadsheet
                wsIssues.Rows[add].Columns["D"] = row.Cells["QuantityIssued"].Value.ToString();

                //'Pack Size' column with last cell of Excel spreadsheet
                wsIssues.Rows[add].Columns["E"].Formula = "=VLOOKUP([@[KB Number]],KBList!D:I,5,FALSE)";

                //'Date' column with last cell of Excel spreadsheet
                wsIssues.Rows[add].Columns["F"] = DateTime.Now.ToString("MM/dd/yyyy");
            }
            catch
            {
                TopMost = false;//MessageBox is on top
                MessageBox.Show("You must enter a value in the cell", "Try again", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion ExportToExcel - Insert ScanDataGrid row into spreadsheet

        #region SendEmail - Send email if 'Current Stock' is lower than or equal to the 'Re-order Point'

        public void SendEmail(string description, string KBNumber, double reOrderPoint, double currentStock)
        {
            //An email gets sent using Simple Mail Transfer Protocol
            Email email = new Email();

            email.Recipients.Add("Gemmathomasgreen@effectphotonics.com");//To markroper@effectphotonics.com and CC glennstephens@effectphotonics.com

            //Set subject and body
            email.Subject = "New stock order on - " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " at " + DateTime.Now.ToString("HH:mm:ss");
            email.IsBodyHtml = true;
            string htmlString = "This item: " + "<b>" + description + "</b>" +
                                " and KB Number: " + "<b>" + KBNumber + "</b>" +
                                " needs to be restocked by " + "<u>at least</u>" + " this amount: " + "<b>" + reOrderPoint + "</b>" +
                                ", where the current stock is: ";

            if (currentStock < 1)
            {
                email.Body = htmlString + "<b style='color:red'>" + currentStock + "</b>";
            }
            else
            {
                email.Body = htmlString + "<b>" + currentStock + "</b>";
            }

            //Send message
            email.SendEmail();
            TopMost = false;//MessageBox is on top
            MessageBox.Show("Email sent");

            TopMost = true;//Kanban app is on top
        }

        #endregion SendEmail - Send email if 'Current Stock' is lower than or equal to the 'Re-order Point'
    }
}